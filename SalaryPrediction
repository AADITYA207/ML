"""Assignment2.ipynb
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/11106gdpSUM0zl9tAUIvgQLPZ_-9b9SWg
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression 
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv("/content/drive/MyDrive/Data for IIS-Lab Assignment (1) (1) (1).csv")

tempd = df
tempd=tempd.drop(tempd.columns[[0,1,2,3,4,5,7,8,10,11,13,15,16]], axis = 1)
tempd=tempd.drop(tempd.columns[[0]],axis=1)
tempd = tempd.drop(tempd.columns[[7,8,9,10,11,12,13]], axis=1)
#print(tempd)
#print(list(tempd.columns))

x = np.array(tempd.iloc[:,:12])
 y = np.array(tempd['High-Salary'])
# print(x)
# print(y)

x_train,x_test,y_train,y_test=train_test_split(x,y, train_size=0.99,random_state=1)

model = LogisticRegression(solver='lbfgs', max_iter=10000)
model.fit(x_train,y_train)
x_pred=model.predict(x_test)
#print(x_pred.shape , y_test.shape)
#print(x_test)
#print(y_test)

print("THIS IS THE PREDICTION OF THE REMAINING TEST CASES BY OUR MODEL: ")
print(x_pred)
print()
print("THIS IS THE TRUE OUTPUT OF THE TEST CASES: ")
print(y_test)
print()
print("THIS WILL REPRESENT THE POINTS WHERE ERROR OCCURRED, ANYTHING OTHER THAN 0 REORESENTS AN ERROR IN THE PREDICTION: ")
print(abs(x_pred - y_test))

print("MODEL SCORE = ",model.score(x_test,y_test))
print("ACCURACY SCORE = ",accuracy_score(y_test,x_pred))

print(confusion_matrix(y_test,x_pred) ," : CONFUSION MATRIX ")

print("CLASS WISE ACCURACY/REPORT:")
print()
print(classification_report(y_test,x_pred))
print("This gives us class wise accuracy, the precision of 0 is the accuracy of our model to predict people WITHOUT high salary. The precision of 1 is the accuracy of our model to predict people WITH high salary.")

"""LET US TRY BY DIFFERENT SPLITTING RATIOS:
1)60:40
"""

x1_train,x1_test,y1_train,y1_test=train_test_split(x,y, train_size=0.6,random_state=1)
model = LogisticRegression(solver='lbfgs', max_iter=10000)
model.fit(x1_train,y1_train)
x1_pred=model.predict(x1_test)
print("THIS IS THE PREDICTION OF THE REMAINING TEST CASES BY OUR MODEL: ")
print(x1_pred)
print()
print("THIS IS THE TRUE OUTPUT OF THE TEST CASES: ")
print(y1_test)
print()
print("THIS WILL REPRESENT THE POINTS WHERE ERROR OCCURRED, ANYTHING OTHER THAN 0 REORESENTS AN ERROR IN THE PREDICTION: ")
print(abs(x1_pred - y1_test))
print("MODEL SCORE = ",model.score(x1_test,y1_test))
print("ACCURACY SCORE = ",accuracy_score(y1_test,x1_pred))

"""LET'S TRY WITH 50:50
"""

x2_train,x2_test,y2_train,y2_test=train_test_split(x,y, train_size=0.5,random_state=1)
model = LogisticRegression(solver='lbfgs', max_iter=10000)
model.fit(x2_train,y2_train)
x2_pred=model.predict(x2_test)
print("THIS IS THE PREDICTION OF THE REMAINING TEST CASES BY OUR MODEL: ")
print(x2_pred)
print()
print("THIS IS THE TRUE OUTPUT OF THE TEST CASES: ")
print(y2_test)
print()
print("THIS WILL REPRESENT THE POINTS WHERE ERROR OCCURRED, ANYTHING OTHER THAN 0 REORESENTS AN ERROR IN THE PREDICTION: ")
print(abs(x2_pred - y2_test))
print("MODEL SCORE = ",model.score(x2_test,y2_test))
print("ACCURACY SCORE = ",accuracy_score(y2_test,x2_pred))

"""NOW WITH 70:30
```
# This is formatted as code
```
"""

x3_train,x3_test,y3_train,y3_test=train_test_split(x,y, train_size=0.7,random_state=1)
model = LogisticRegression(solver='lbfgs', max_iter=10000)
model.fit(x3_train,y3_train)
x3_pred=model.predict(x3_test)
print("THIS IS THE PREDICTION OF THE REMAINING TEST CASES BY OUR MODEL: ")
print(x3_pred)
print()
print("THIS IS THE TRUE OUTPUT OF THE TEST CASES: ")
print(y3_test)
print()
print("THIS WILL REPRESENT THE POINTS WHERE ERROR OCCURRED, ANYTHING OTHER THAN 0 REORESENTS AN ERROR IN THE PREDICTION: ")
print(abs(x3_pred - y3_test))
print("MODEL SCORE = ",model.score(x3_test,y3_test))
print("ACCURACY SCORE = ",accuracy_score(y3_test,x3_pred))

"""WITH 90:10 SPLIT"""

x4_train,x4_test,y4_train,y4_test=train_test_split(x,y, train_size=0.9,random_state=1)
model = LogisticRegression(solver='lbfgs', max_iter=10000)
model.fit(x4_train,y4_train)
x4_pred=model.predict(x4_test)
print("THIS IS THE PREDICTION OF THE REMAINING TEST CASES BY OUR MODEL: ")
print(x4_pred)
print()
print("THIS IS THE TRUE OUTPUT OF THE TEST CASES: ")
print(y4_test)
print()
print("THIS WILL REPRESENT THE POINTS WHERE ERROR OCCURRED, ANYTHING OTHER THAN 0 REORESENTS AN ERROR IN THE PREDICTION: ")
print(abs(x4_pred - y4_test))
print("MODEL SCORE = ",model.score(x4_test,y4_test))
print("ACCURACY SCORE = ",accuracy_score(y4_test,x4_pred))

"""MODIFICATIONS USED HERE:
1)I have removed all the unecessary information which has either very insignificant or no role in dicatating the chances of getting a higher salary, like gender, ID, city, 10th%, 12th% etc..
EXPERIMENTATION:
"""

print("Experiment 1: ")
print("Let's use the graduation year as another important parameter, assuming the fact that graduating after 2007 gave more chance to fetch better jobs due to more MNC's")

Year = [0]*3998
l = df['12graduation']

for i in range(len(l)):
  
  z=(l[i]-2008)*0.5
  Year[i]=z
print(Year)

# tempd=tempd.drop(tempd.columns[[13]], axis = 1)
tempd.insert(12,"Graduating_year",Year)
print(tempd.columns)

x_ = np.array(tempd.iloc[:,:13])
y_ = np.array(tempd['High-Salary'])
print(x_)
print(y_)
x4_train,x4_test,y4_train,y4_test=train_test_split(x_,y_, train_size=0.5,random_state=302)
model = LogisticRegression(solver='lbfgs', max_iter=10000)
model.fit(x4_train,y4_train)
x4_pred=model.predict(x4_test)
print("THIS IS THE PREDICTION OF THE REMAINING TEST CASES BY OUR MODEL: ")
print(x4_pred)
print()
print("THIS IS THE TRUE OUTPUT OF THE TEST CASES: ")
print(y4_test)
print()
print("THIS WILL REPRESENT THE POINTS WHERE ERROR OCCURRED, ANYTHING OTHER THAN 0 REPRESENTS AN ERROR IN THE PREDICTION: ")
print(abs(x4_pred - y4_test))
print("MODEL SCORE = ",model.score(x4_test,y4_test))
print("ACCURACY SCORE = ",accuracy_score(y4_test,x4_pred))

print("Experiment 2: Providing +0.5 per year to the students who graduated from college in year 2011 onwards")

Year = [0]*3998
l = df['GraduationYear']
print(l)
for i in range(len(l)):
    z=(l[i]-2012)*0.5+0.5
    Year[i]=z
print(Year)

# tempd = tempd.drop(tempd.columns[[13]],axis=1)
tempd.insert(13,"Graduating_year_college",Year)
print(tempd.columns)

x_ = np.array(tempd.iloc[:,:14])
y_ = np.array(tempd['High-Salary'])
print(x_)
x4_train,x4_test,y4_train,y4_test=train_test_split(x_,y_, train_size=0.9,random_state=302)
model = LogisticRegression(solver='lbfgs', max_iter=10000)
model.fit(x4_train,y4_train)
x4_pred=model.predict(x4_test)
print("THIS IS THE PREDICTION OF THE REMAINING TEST CASES BY OUR MODEL: ")
print(x4_pred)
print()
print("THIS IS THE TRUE OUTPUT OF THE TEST CASES: ")
print(y4_test)
print()
print("THIS WILL REPRESENT THE POINTS WHERE ERROR OCCURRED, ANYTHING OTHER THAN 0 REPRESENTS AN ERROR IN THE PREDICTION: ")
print(abs(x4_pred - y4_test))
print("MODEL SCORE = ",model.score(x4_test,y4_test))
print("ACCURACY SCORE = ",accuracy_score(y4_test,x4_pred))

print("Hence including the 12th graduation weights, reduces the accuracy, however, including the college graduating year as well, gives a higher accuracy.")

print('Experiment 3: Shuffling the data set')

l=[]
k = int(input())
for i in range(0,k):
  x4_train,x4_test,y4_train,y4_test=train_test_split(x,y, train_size=0.9,random_state=i)
  model = LogisticRegression(solver='lbfgs', max_iter=10000)
  model.fit(x4_train,y4_train)
  x4_pred=model.predict(x4_test)
  l.append(model.score(x4_test,y4_test))
  
print("THE GIVEN IS THE LIST OF ALL THE SCORES FROM 0 TO K RANDOM SHUFFLE")
print()

print(l)
print()
max=float(0)
for i in range(len(l)):
  if max<float(l[i]):
     max=float(l[i])

print("THE MAX IS " , max, "AT RANDOM STATE ", l.index(max) )
